{"ast":null,"code":"import React,{createContext,useState,useContext,useEffect}from'react';import axios from'axios';import{jsx as _jsx}from\"react/jsx-runtime\";const AuthContext=/*#__PURE__*/createContext(null);export const AuthProvider=_ref=>{let{children}=_ref;const[user,setUser]=useState(null);const[loading,setLoading]=useState(true);useEffect(()=>{// Check if user is logged in on mount\nconst token=localStorage.getItem('authToken');const userRole=localStorage.getItem('userRole');if(token&&userRole){setUser({role:userRole});}setLoading(false);},[]);const login=async(email,password)=>{try{// In a real app, this would be an API call\n// For demo purposes, we'll simulate an API response\nawait new Promise(resolve=>setTimeout(resolve,1000));// Demo credentials\nif(email==='admin@example.com'&&password==='admin123'){const userData={role:'admin'};localStorage.setItem('authToken','demo-token');localStorage.setItem('userRole','admin');setUser(userData);return{success:true};}else{throw new Error('Invalid email or password');}}catch(error){return{success:false,error:error.message};}};const logout=()=>{localStorage.removeItem('authToken');localStorage.removeItem('userRole');setUser(null);};const value={user,loading,login,logout,isAuthenticated:!!user,isAdmin:(user===null||user===void 0?void 0:user.role)==='admin'};return/*#__PURE__*/_jsx(AuthContext.Provider,{value:value,children:!loading&&children});};export const useAuth=()=>{const context=useContext(AuthContext);if(!context){throw new Error('useAuth must be used within an AuthProvider');}return context;};","map":{"version":3,"names":["React","createContext","useState","useContext","useEffect","axios","jsx","_jsx","AuthContext","AuthProvider","_ref","children","user","setUser","loading","setLoading","token","localStorage","getItem","userRole","role","login","email","password","Promise","resolve","setTimeout","userData","setItem","success","Error","error","message","logout","removeItem","value","isAuthenticated","isAdmin","Provider","useAuth","context"],"sources":["D:/PROGRAMMING/PROGRAMMING/YOUR_lie/anime-streaming-site/client/src/contexts/AuthContext.js"],"sourcesContent":["import React, { createContext, useState, useContext, useEffect } from 'react';\r\nimport axios from 'axios';\r\n\r\nconst AuthContext = createContext(null);\r\n\r\nexport const AuthProvider = ({ children }) => {\r\n  const [user, setUser] = useState(null);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  useEffect(() => {\r\n    // Check if user is logged in on mount\r\n    const token = localStorage.getItem('authToken');\r\n    const userRole = localStorage.getItem('userRole');\r\n    if (token && userRole) {\r\n      setUser({ role: userRole });\r\n    }\r\n    setLoading(false);\r\n  }, []);\r\n\r\n  const login = async (email, password) => {\r\n    try {\r\n      // In a real app, this would be an API call\r\n      // For demo purposes, we'll simulate an API response\r\n      await new Promise(resolve => setTimeout(resolve, 1000));\r\n\r\n      // Demo credentials\r\n      if (email === 'admin@example.com' && password === 'admin123') {\r\n        const userData = { role: 'admin' };\r\n        localStorage.setItem('authToken', 'demo-token');\r\n        localStorage.setItem('userRole', 'admin');\r\n        setUser(userData);\r\n        return { success: true };\r\n      } else {\r\n        throw new Error('Invalid email or password');\r\n      }\r\n    } catch (error) {\r\n      return { success: false, error: error.message };\r\n    }\r\n  };\r\n\r\n  const logout = () => {\r\n    localStorage.removeItem('authToken');\r\n    localStorage.removeItem('userRole');\r\n    setUser(null);\r\n  };\r\n\r\n  const value = {\r\n    user,\r\n    loading,\r\n    login,\r\n    logout,\r\n    isAuthenticated: !!user,\r\n    isAdmin: user?.role === 'admin',\r\n  };\r\n\r\n  return (\r\n    <AuthContext.Provider value={value}>\r\n      {!loading && children}\r\n    </AuthContext.Provider>\r\n  );\r\n};\r\n\r\nexport const useAuth = () => {\r\n  const context = useContext(AuthContext);\r\n  if (!context) {\r\n    throw new Error('useAuth must be used within an AuthProvider');\r\n  }\r\n  return context;\r\n}; "],"mappings":"AAAA,MAAO,CAAAA,KAAK,EAAIC,aAAa,CAAEC,QAAQ,CAAEC,UAAU,CAAEC,SAAS,KAAQ,OAAO,CAC7E,MAAO,CAAAC,KAAK,KAAM,OAAO,CAAC,OAAAC,GAAA,IAAAC,IAAA,yBAE1B,KAAM,CAAAC,WAAW,cAAGP,aAAa,CAAC,IAAI,CAAC,CAEvC,MAAO,MAAM,CAAAQ,YAAY,CAAGC,IAAA,EAAkB,IAAjB,CAAEC,QAAS,CAAC,CAAAD,IAAA,CACvC,KAAM,CAACE,IAAI,CAAEC,OAAO,CAAC,CAAGX,QAAQ,CAAC,IAAI,CAAC,CACtC,KAAM,CAACY,OAAO,CAAEC,UAAU,CAAC,CAAGb,QAAQ,CAAC,IAAI,CAAC,CAE5CE,SAAS,CAAC,IAAM,CACd;AACA,KAAM,CAAAY,KAAK,CAAGC,YAAY,CAACC,OAAO,CAAC,WAAW,CAAC,CAC/C,KAAM,CAAAC,QAAQ,CAAGF,YAAY,CAACC,OAAO,CAAC,UAAU,CAAC,CACjD,GAAIF,KAAK,EAAIG,QAAQ,CAAE,CACrBN,OAAO,CAAC,CAAEO,IAAI,CAAED,QAAS,CAAC,CAAC,CAC7B,CACAJ,UAAU,CAAC,KAAK,CAAC,CACnB,CAAC,CAAE,EAAE,CAAC,CAEN,KAAM,CAAAM,KAAK,CAAG,KAAAA,CAAOC,KAAK,CAAEC,QAAQ,GAAK,CACvC,GAAI,CACF;AACA;AACA,KAAM,IAAI,CAAAC,OAAO,CAACC,OAAO,EAAIC,UAAU,CAACD,OAAO,CAAE,IAAI,CAAC,CAAC,CAEvD;AACA,GAAIH,KAAK,GAAK,mBAAmB,EAAIC,QAAQ,GAAK,UAAU,CAAE,CAC5D,KAAM,CAAAI,QAAQ,CAAG,CAAEP,IAAI,CAAE,OAAQ,CAAC,CAClCH,YAAY,CAACW,OAAO,CAAC,WAAW,CAAE,YAAY,CAAC,CAC/CX,YAAY,CAACW,OAAO,CAAC,UAAU,CAAE,OAAO,CAAC,CACzCf,OAAO,CAACc,QAAQ,CAAC,CACjB,MAAO,CAAEE,OAAO,CAAE,IAAK,CAAC,CAC1B,CAAC,IAAM,CACL,KAAM,IAAI,CAAAC,KAAK,CAAC,2BAA2B,CAAC,CAC9C,CACF,CAAE,MAAOC,KAAK,CAAE,CACd,MAAO,CAAEF,OAAO,CAAE,KAAK,CAAEE,KAAK,CAAEA,KAAK,CAACC,OAAQ,CAAC,CACjD,CACF,CAAC,CAED,KAAM,CAAAC,MAAM,CAAGA,CAAA,GAAM,CACnBhB,YAAY,CAACiB,UAAU,CAAC,WAAW,CAAC,CACpCjB,YAAY,CAACiB,UAAU,CAAC,UAAU,CAAC,CACnCrB,OAAO,CAAC,IAAI,CAAC,CACf,CAAC,CAED,KAAM,CAAAsB,KAAK,CAAG,CACZvB,IAAI,CACJE,OAAO,CACPO,KAAK,CACLY,MAAM,CACNG,eAAe,CAAE,CAAC,CAACxB,IAAI,CACvByB,OAAO,CAAE,CAAAzB,IAAI,SAAJA,IAAI,iBAAJA,IAAI,CAAEQ,IAAI,IAAK,OAC1B,CAAC,CAED,mBACEb,IAAA,CAACC,WAAW,CAAC8B,QAAQ,EAACH,KAAK,CAAEA,KAAM,CAAAxB,QAAA,CAChC,CAACG,OAAO,EAAIH,QAAQ,CACD,CAAC,CAE3B,CAAC,CAED,MAAO,MAAM,CAAA4B,OAAO,CAAGA,CAAA,GAAM,CAC3B,KAAM,CAAAC,OAAO,CAAGrC,UAAU,CAACK,WAAW,CAAC,CACvC,GAAI,CAACgC,OAAO,CAAE,CACZ,KAAM,IAAI,CAAAV,KAAK,CAAC,6CAA6C,CAAC,CAChE,CACA,MAAO,CAAAU,OAAO,CAChB,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}