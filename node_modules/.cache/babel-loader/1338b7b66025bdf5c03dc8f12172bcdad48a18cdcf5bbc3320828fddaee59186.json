{"ast":null,"code":"import React from'react';import{Navigate,useLocation}from'react-router-dom';import{useAuth}from'../contexts/AuthContext';import{jsx as _jsx}from\"react/jsx-runtime\";function ProtectedRoute(_ref){let{children,requiredRole='admin'}=_ref;const location=useLocation();const{isAuthenticated,isAdmin}=useAuth();if(!isAuthenticated||requiredRole==='admin'&&!isAdmin){// Redirect to login page but save the attempted location\nreturn/*#__PURE__*/_jsx(Navigate,{to:\"/login\",state:{from:location},replace:true});}return children;}export default ProtectedRoute;","map":{"version":3,"names":["React","Navigate","useLocation","useAuth","jsx","_jsx","ProtectedRoute","_ref","children","requiredRole","location","isAuthenticated","isAdmin","to","state","from","replace"],"sources":["D:/PROGRAMMING/PROGRAMMING/YOUR_lie/anime-streaming-site/client/src/components/ProtectedRoute.js"],"sourcesContent":["import React from 'react';\r\nimport { Navigate, useLocation } from 'react-router-dom';\r\nimport { useAuth } from '../contexts/AuthContext';\r\n\r\nfunction ProtectedRoute({ children, requiredRole = 'admin' }) {\r\n  const location = useLocation();\r\n  const { isAuthenticated, isAdmin } = useAuth();\r\n\r\n  if (!isAuthenticated || (requiredRole === 'admin' && !isAdmin)) {\r\n    // Redirect to login page but save the attempted location\r\n    return <Navigate to=\"/login\" state={{ from: location }} replace />;\r\n  }\r\n\r\n  return children;\r\n}\r\n\r\nexport default ProtectedRoute; "],"mappings":"AAAA,MAAO,CAAAA,KAAK,KAAM,OAAO,CACzB,OAASC,QAAQ,CAAEC,WAAW,KAAQ,kBAAkB,CACxD,OAASC,OAAO,KAAQ,yBAAyB,CAAC,OAAAC,GAAA,IAAAC,IAAA,yBAElD,QAAS,CAAAC,cAAcA,CAAAC,IAAA,CAAuC,IAAtC,CAAEC,QAAQ,CAAEC,YAAY,CAAG,OAAQ,CAAC,CAAAF,IAAA,CAC1D,KAAM,CAAAG,QAAQ,CAAGR,WAAW,CAAC,CAAC,CAC9B,KAAM,CAAES,eAAe,CAAEC,OAAQ,CAAC,CAAGT,OAAO,CAAC,CAAC,CAE9C,GAAI,CAACQ,eAAe,EAAKF,YAAY,GAAK,OAAO,EAAI,CAACG,OAAQ,CAAE,CAC9D;AACA,mBAAOP,IAAA,CAACJ,QAAQ,EAACY,EAAE,CAAC,QAAQ,CAACC,KAAK,CAAE,CAAEC,IAAI,CAAEL,QAAS,CAAE,CAACM,OAAO,MAAE,CAAC,CACpE,CAEA,MAAO,CAAAR,QAAQ,CACjB,CAEA,cAAe,CAAAF,cAAc","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}